/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL||k<=1){
            return head;
        }
        ListNode* prev=NULL;
        ListNode* current=head;
        ListNode* next= NULL;
        ListNode* temp=head;
        int count=0;
        int nodecount=0;
        while(temp!=NULL){
            nodecount++;
            temp=temp->next;
        }
        if(k==nodecount){
            while(count<k&&current!=NULL){
                next=current->next;
                current->next=prev;
                prev=current;
                current=next;
                count++;
            }
            return prev;
        }
        else if(k<=nodecount){
            while(count<k&&current!=NULL){
		next=current->next;
			current->next=prev;
			prev=current;
			current=next;
			count++;
	}
            head->next=reverseKGroup(next,k);
            return prev;
        }
        else{
            
            return head;
        }

        
    }
};
