//https://leetcode.com/problems/add-two-numbers/submissions/?envType=study-plan-v2&envId=top-interview-150

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *a=l1;
        int len1=0;
        ListNode *temp=l1;
        while(temp!=NULL){
            len1++;
            temp=temp->next;
        }
        temp=l2;
        int len2=0;
        while(temp!=NULL){
            len2++;
            temp=temp->next;
        }
        ListNode *abc=NULL;
        ListNode *ans=NULL;
        int sum=0;
        int carry=0;

        while(l1!=NULL&&l2!=NULL){
            sum=l1->val + l2->val+ carry;
            ListNode *ac= new ListNode(sum%10);
            carry=sum/10;
            if(ans==NULL){
                ans=ac;
                abc=ans;
            }
            else{
                ans->next=ac;
                ans=ans->next;
            }
            l1=l1->next;
            l2=l2->next;
        }
        
         if(l1==NULL&&l2!=NULL){
             while(l2!=NULL){
                 sum=l2->val+carry;
                 ListNode *ac= new ListNode(sum%10);
                 carry=sum/10;
                ans->next=ac;
                ans=ans->next;
                l2=l2->next;
             }
         }
               
         if(l2==NULL&&l1!=NULL){
             while(l1!=NULL){
                 sum=l1->val +carry;
                 ListNode *ac= new ListNode(sum%10);
                 carry=sum/10;
                 ans->next=ac;
                 ans=ans->next;
                 l1=l1->next;
             }
         }
        
         if(carry!=0){
             ListNode *ac= new ListNode(carry);
             ans->next=ac;
         }

         
        return abc;
    }
};
